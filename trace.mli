(** Representation of EventRacer traces. *)

(** {1 Data types} *)

(** Opaque heap pointer. *)
type pointer = int64 [@@deriving ord]

(** {2 Values} *)

(** JavaScript values. *)
type value =
    Vnull (** The [null] constant *)
  | Vundefined (** An undefined value *)
  | Vbool of bool (** A boolean *)
  | Vint of int32 (** An integer *)
  | Vnullstring (** The null string, as a special case *)
  | Vstring of string (** A string *)
  | VDOMNode of pointer (** A pointer to a DOM node *)
  | VObject of { objtype : string; id : int; }
  (** A JavaScript object, with the given type [objectype]
    * (as indicated by the interpreter) and unique [id]. *)
  | VEvent of pointer (** A browser event *)
  | VDOMTimer of pointer (** A browser timer. *)
  | Vunknown (** Unknown type *)
      [@@deriving ord, show]

(** Sets of values *)
module ValueSet : BatSet.S with type elt = value

(** Maps over values *)
module ValueMap : sig
  include BatMap.S with  type key = value
  val pp: ?sep:(unit Fmt.t) -> (value * 'a) Fmt.t -> 'a t Fmt.t
  val pp_default: ?esep:(unit Fmt.t) ->
    ?psep:(unit Fmt.t) -> 'a Fmt.t -> 'a t Fmt.t
end

(** {2 References}*) 

(** JavaScript references. Most of these references are
    internal scripts to the browser. *)
type reference =
    RHeap of { objtype : string; id : int; prop : string; }
  (** A field of a JavaScript heap object.
      [objtype] is the (interpreter-derived) type of the object,
      [id] is the unique object identifier, and [prop] the
      property. *)
  | RDOMNode of pointer
  | RScriptRunner of { runner : pointer; element : pointer; }
  | REventHandler of pointer
  | RTree of { scope : pointer; id : string; }
  | RDOMNodeAttribute of { node : pointer; attribute : string; }
  | RCachedResource of { resource : pointer; client : pointer; }
  | RTimer of int
  | RNodeEvent of { nodetype : string; node : pointer; handler : string; }
  | RArrayCell of { id : int; index : int; }
  | RArrayLength of int
  | RMemCell of { base : pointer; prop : string; }
  | Runknown
      [@@deriving ord, show]

(** Sets of references. *)
module ReferenceSet : BatSet.S with type elt = reference

(** Maps over references. *)
module ReferenceMap : sig
  include BatMap.S with type key = reference
  val pp: ?sep:(unit Fmt.t) -> (reference * 'a) Fmt.t -> 'a t Fmt.t
  val pp_default: ?esep:(unit Fmt.t) ->
    ?psep:(unit Fmt.t) -> 'a Fmt.t -> 'a t Fmt.t
end

(** {2 Scopes} *)

(** The source of code in a code block. *)
type js_type = GlobalCode | FunctionCode | EvalCode [@@deriving ord, show]

(** {3 Clusters of scope types} *)
(** The following types cluster some kinds of events,
    so that they can easily be selected or ignored in pattern matching. *)

(** Browser event handling *)
type event_fire =
    FireAnchor
  | FireDefault
  | FireTarget of string
  | FireCapture of string
  | FireBubble of string

(** Event listener manipulation *)
type event_listener_scope = Add | Remove [@@deriving ord]

(** Events about resource loading *)
type resource_state =
    ResLoadStart
  | ResRecvResp
  | ResRecvData
  | ResFinishLoad
  | ResFailed
  | ResCancelFail
  | ResAuthRecv
  | ResCancelAuth
  | MainResponse
  | ResRecv304

(** UI events *)
type event_handler =
    EHHittest
  | EHScroll
  | EHMousePress
  | EHMouseMove
  | EHMouseRelease
  | EHWheel
  | EHKey

(** Changes in document status *)
type document_event =
    DocDelete
  | DocRecalc
  | DocPending
  | DocDOMFocus
  | DOMLayoutTimer (** Page getting a new layout *)

(** Event queue internals *)
type event_queue_scope = EQDispatch | EQLoadEventDelay | EQEventQueue

(** Indications about how a script was loaded. *)
type script_type =
    STunknown (** No information *)
  | STinline (** Inline script *)
  | STsync (** Regular, synchronously loaded external script *)
  | STasync  (** [async] script *)
  | STdefer (** [defer] script *)
  | STIinline (** Inline script generated by DOM manipulation *)
  | STIasync (** External script generated by DOM manipulation *)
  [@@deriving ord, show]

(** Scopes.

    EventRacer uses scopes to describe interesting properties of
    sequences of basic memory access and task handling events. *)
type scope =
    JSONDeclareGlobalvar (** This event declares a global JSON variable *)
  | JSONDeclareGlobal (** This event declares a global JSON value *)
  | JSExec of { callee : int; script_id : int; lstart : int; lend : int;
      source : string; impl : pointer;
    }
    (** Execution of a JavaScript block. [callee] and [script_id] identify
        which script is executed, [lstart] and [lend] describe the
        character positioin in the source code, [source] states where
        the source code was obtained from, and [impl] points to the
        byte code. *)
  | JSCall of { callee : int; script_id : int; lstart : int; lend : int;
      source : string; impl : pointer;
    }
    (** Execution to a JavaScript function. [callee] and [script_id] identify
        which script is executed, [lstart] and [lend] describe the
        character positioin in the source code, [source] states where
        the source code was obtained from, and [impl] points to the
        byte code. *)
  | JSCode of { source : string; jstype : js_type; }
    (** Provenance information of JavaScript code. It was loaded from
        [source] and is  of the type described in [jstype]. *)
  | JSInternal of string (** Call to a JavaScript built-in function *)
  | JSDeclareFunction (** This event declares a JavaScript function *)
  | JSDeclareGlobalvar (** This event declares a JavaScript global variable *)
  | EventFire of event_fire (** An event has been fired *)
  | EventListenerOperation of event_listener_scope
  (** Event listener changes *)
  | ResourceOperation of { state : resource_state; name : string; }
                           (** A resource named [name] changes state to [state] *)
  | Event of string (** A named event *)
  | Parse of string
  | EventHandler of event_handler (** An event handler is invoked *)
  | DocumentEvent of document_event
  | JSExecuteScript (** A JavaScript script is about to be executed *)
  | Tokenize
  | TimerScript
  | TimerDOM
  | EventQueue of event_queue_scope
  | CachedResource
  | SUnknown
  | Script of script_type (* Gives the loading mode of a script *)
  | Nondet of string (* Non-determinism of the given type encountered *)
  | Env of string (* Environment dependence of the given type encountered *)
  [@@deriving ord, show]

(** Is the given scope a JavaScript scope? *)
val is_javascript_scope : scope -> bool

(** {2 Traces} *)

(** A trace contains events, which contain lists of
  * commands. *)
type command =
    Read of reference * value (** Read of a value from a memory cell *)
  | Write of reference * value (** Write of a value to a memory cell *)
  | Post of int
    (** The task with given ID has been posted. -1 indicates that
        some unknown task has been posted. *)
  | Enter of scope (** The given scope has been entered. *)
  | Exit (** Exit from the last entered scope. *)
  [@@deriving show]

val pp_command_indent : Format.formatter -> command -> unit

(** Classification of event action causes. *)
type event_action_type =
    EVUnknown
  | EVTimer
  | EVNetwork
  | EVUserInterface
  | EVContinuation
  [@@deriving show]

(** Data about an event. *)
type event = {
  evtype : event_action_type; (** Cause *)
  id : int; (** Unique identifier *)
  commands : command list; (** Commands that make up the event *)
} [@@deriving show]

val pp_event_indent : Format.formatter -> event -> unit

(** The graph structure describing the happens-before relation
    of the trace. Vertices are event identifiers,
    while the edges contain information about delays.
    More precisely, edges are labeled with [Some delay],
    containing a delay in milli-seconds, or [None] for
    non-timed hb edges. *)
module DependencyGraph = CleanLog.DependencyGraph

(** Information about a race. *)
type race_info = {
  ev1 : int; (** Number of the first involved event. *)
  ev2 : int; (** Number of the second involved event. *)
  cmd1 : int; (** Index of the first involved command. *)
  cmd2 : int; (** Index of the second involved command. *)
  var : reference; (** Reference on which the race occurs. *)
}

(** A trace. *)
type trace = {
  events : event list; (** The events of the trace. *)
  deps : DependencyGraph.t; (** The happens-before relation on events. *)
  races : race_info list; (** The races that EventRacer identified. *)
} [@@deriving show]
val pp_trace : Format.formatter -> trace -> unit


val pp_event_with_deps : DependencyGraph.t -> event Fmt.t
val pp_trace_with_deps : trace Fmt.t
val pp_trace_indent : trace Fmt.t

(** {1 Parsers}*)

(** Transform a trace produced by EventRacer-ocaml to this representation *)
val parse_trace : CleanLog.trace -> trace

(** [load_trace filename] loads a trace from the given file name. *)
val load_trace : string -> trace
